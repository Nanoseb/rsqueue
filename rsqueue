#!/bin/bash
# rsqueue: v2.0.12
# Script used to monitor jobs and refresco running instances more particularly
# For Marclus3 and Marclus4
# by Sebastien Lemaire <sebastien.lemaire@soton.ac.uk>
# license MIT

allparams="-u -t -p -i"
defaultparams="-i"

MemFactor=4
# n MCells => MemFactor*n GB RAM

man_sub () {
    echo -e "Usage: rsqueue [OPTIONS]
Outputs:
  -i                       Print detailed info about refresco job (default behaviour)
                               A \"\e[31m!\e[0m\" will appear near the \"Iterations\" column if the calculation is not converging
                               The time left will turn red if the runtime specified in the jobfile is not long enough
  -u ([users])             Print job info of all users (default) or from a comma separated list of users
  -t / --top               Equivalent of slurmtop to summarize cluster load
  -p                       Print info about partitions usage
  -c                       Count the number of core used per user
  -a / --all               Print (almost) everything (equivalent of: rsqueue $allparams)

Output tweaking:
  -s                       Don't print the storage needed for simulations (speed up output)
  -r                       Print only running jobs
  --maxit                  Print the maximum iteration number possible within the job time limit
  --st                     Sort job list by start time
  --pn                     Don't print the project number in the job name
  --node                   Print the nodes being used in the -u output

Tools:
  -d [jobID]               Print the working directory of the specified JobID
  --stop [jobID]           Write a stopfile in the computation working directory to cleanly stop the simulation
  -f / --follow ([time])   Refresh the your job list every [time]s (default being 15s)
  --notif                  Display a desktop notification when a job state changes, needs X-forwarding and -f
  -h / --help              Print this help

rsqueue is developed under MIT licence: feel free to contribute and give feedbacks!
Get the latest version from: https://github.com/nanoseb/rsqueue"
}


convert_human() {
    awk '{ sum=$1 ; hum[1024**3]="T";hum[1024**2]="G";hum[1024]="M"; for (x=1024**3; x>=1024; x/=1024){ if (sum>=x) { printf "%.1f%s\n",sum/x,hum[x];break } }}' <<<"$1"
}

gen_line() {
    printf "%${1}s \n" "" | sed 's/\ /â”€/g'
}

main_sub () {

    # Header
    if [ "$strg" = 1 ]
    then
        if [ "$marclus" = 4 ]
        then
            printf "%-15s %-16s %-9s %-8s %-16s %-12s %-3s %-9s %-13s %-20s %-20s %s\n"\
                "Directory" "Job name" "Job-ID" "Cores" "Iterations" "Storage" "%" "Mem/CPU" "Cost" "Start time" "ETA" "Time left"
            gen_line 167
        else
            printf "%-15s %-16s %-9s %-8s %-16s %-12s %-3s %-9s %-20s %-20s %s\n"\
                "Directory" "Job name" "Job-ID" "Cores" "Iterations" "Storage" "%" "Mem/CPU" "Start time" "ETA" "Time left"
            gen_line 153
        fi
    else
        if [ "$marclus" = 4 ]
        then
            printf "%-15s %-16s %-9s %-8s %-15s %-5s %-9s %-14s %-20s %-20s %s\n"\
                "Directory" "Job name" "Job-ID" "Cores" "Iterations" "%" "Mem/CPU" "Cost" "Start time" "ETA" "Time left"
            gen_line 156
        else
            printf "%-15s %-16s %-9s %-8s %-15s %-5s %-10s %-20s %-20s %s\n"\
                "Directory" "Job name" "Job-ID" "Cores" "Iterations" "%" "Mem/CPU" "Start time" "ETA" "Time left"
            gen_line 142
        fi
    fi

    main_nb_line=$((main_nb_line + 2))

    ETA24hsize=0
    ETAsizetotal=0
    currentsizetotal=0
    nowepoch=$(date +%s)

    while read line;
    do
        main_nb_line=$((main_nb_line + 1))
        [ ! "$line" ] && echo "No job" && strg=0 && continue

        # Gathering of job metadata
        jobstate=$(awk '{print $1}' <<<$line)
        jobid=$(awk '{print $2}' <<<$line)
        jobinfo=$(scontrol show job $jobid | sed 's/ /\n/g')
        jobcore=$(grep -m 1 "^NumCPUs=" <<<"$jobinfo" | awk -F"=" '{print $2}')
        jobname=$(grep -m 1 "^JobName=" <<<"$jobinfo" | sed 's/^[^=]*=//')
        jobdate=$(grep -m 1 "^StartTime=" <<<"$jobinfo" | awk -F"=" '{print $2}' | sed 's/T.*$//' | awk -F"-" '{print $3 "/" $2 "/" $1}')
        jobtime=$(grep -m 1 "^StartTime=" <<<"$jobinfo" | awk -F"T" '{print $3}' | sed 's/:..$//')

        #jobfile=$(grep -m 1 "^Command=" <<<"$jobinfo" | awk -F"=" '{print $2}')
        jobout=$(grep -m 1 "^StdOut=" <<<"$jobinfo" | sed 's/^[^=]*=//')
        dir=$(grep -m 1 "^WorkDir=" <<<"$jobinfo" | sed 's/^[^=]*=//')
        dirp=$(sed 's/[/\.]*$//' <<<"$dir" | awk -F"/" '{print $NF}')
        # dirp=$(awk -F"/" '{print $NF}' <<<"$(cd "$dir" && pwd)")

        if [ "$project_number" = 1 ]
        then
            jobname_short=$jobname
        else
            jobname_short=$(sed 's/^[^_]*_//' <<<"$jobname")
        fi

        [ -d "$dir" ] || continue
        controlspath="$dir"/controls.xml
        residualspath="$dir"/residuals.dat


        isrefresco="y"
        [ "$jobstate" = "RUNNING" ] && isrefresco=$(grep -m 1 "^# ReFRESCO " "$jobout")


        if [ "$jobstate" = "RUNNING" ] && [ -e "$controlspath" ] && [ -e "$residualspath" ] && [ "$isrefresco" ]
        then

            controls=$(cat "$controlspath")
            residuals=$( (head; tail) < "$residualspath")

            reportgeneral=$(cat "$dir"/report_general.xml)'</log>'
            nCells=$(xmllint --shell <(echo "$reportgeneral") <<<'cat //log/topology_info/topology_file/nIntCells/total' 2> /dev/null | sed 's/[^0-9]//g;2p' -n)
            if [[ "$nCells" ]]
            then
                mem=$(bc <<<"$nCells * $MemFactor *1.048576/$jobcore") # Memory in K
                mem_s='~'$(convert_human "$mem")
            else
                mem_s=''
            fi

            outerwarn=""
            initialtimestep=0
            unsteady=$(xmllint --shell <(echo "$controls") <<<'cat //controls/timeLoop/unsteady' 2> /dev/null | grep -m 1 true)
            if [ "$unsteady" ]
            then
                currentstep=$(tail -n 1 <(echo "$residuals") | awk '{print $2}' | sed 's/[^0-9]//g')
                maxtimestep=$(xmllint --shell <(echo "$controls") <<<'cat //controls/timeLoop/maxTimesteps' | sed 's/[^0-9]//g;2p' -n)

                boolrestart=$(xmllint --shell <(echo "$controls") <<<'cat //controls/restart/restart' | grep -m 1 true)
                boolresetcount=$(xmllint --shell <(echo "$controls") <<<'cat //controls/restart/resetCounter' | grep -m 1 false)

                [ -n "$boolrestart" -a -n "$boolresetcount" ] && initialtimestep=$(xmllint --shell <(echo "$controls") <<<'cat //controls/restart/restartFileName' | sed 's/[^0-9]//g;2p' -n)

                [ ! "$initialtimestep" ] && initialtimestep=0

                outermax=$(xmllint --shell <(echo "$controls") <<<'cat //controls/outerLoop/maxIteration' | sed 's/[^0-9]//g;2p' -n)
                outercurrent=$(tail -n 1 <(echo "$residuals") | awk '{print $3}')
                [ "$outermax" = "$outercurrent" ] && outerwarn="!"
            else
                currentstep=$(tail -n 1 <(echo "$residuals") | awk '{print $1}' | sed 's/[^0-9]//g')
                maxtimestep=$(xmllint --shell <(echo "$controls") <<<'cat //controls/outerLoop/maxIteration' | sed 's/[^0-9]//g;2p' -n)
            fi

            initialtimestepf=$(head -n 3 <(echo "$residuals") | sed '3!d' | awk '{print $2}')
            [ -z "$initialtimestepf" ] && initialtimestepf=$initialtimestep

            [ -z "$currentstep" ] && currentstep=$(bc <<<"$initialtimestep +1")
            [ "$currentstep" = "$initialtimestepf" ] && currentstep=$(bc <<<"$initialtimestepf +1")

            #jobdate=$(head -n 5 "$jobout" | sed '5!d' | awk '{print $3}' | sed 's/\./\//g')
            #jobtime=$(head -n 5 "$jobout" | sed '5!d' | awk '{print $4}')

            jobtimelimit=$(grep -m 1 "^TimeLimit=" <<<"$jobinfo" | awk -F"=" '{print $2}' | sed 's/-/:/' | sed 's/^\(..:..:..\)$/0:\1/' | awk -F":" '{print $4+$3*60+$2*3600+$1*86400}')
            startday=$(awk -F"/" '{print $3 "/" $2 "/" $1}' <<<$jobdate)
            starthour=$jobtime
            startepoch=$(date -d "$startday $starthour" +%s)
            ETAepoch=$(bc <<<"$nowepoch + ($maxtimestep - $currentstep)*($nowepoch - $startepoch)/($currentstep-$initialtimestep)")
            ETAdate=$(date -d @$ETAepoch +%d/%m/%Y\ %H:%M)
            ETAsl=$((ETAepoch - nowepoch))

            if [ $((ETAsl - 90000 )) -lt 0 ]
            then
                ETAtime=$(echo 0$(bc <<<"$ETAsl/3600"):0$(bc <<<"($ETAsl%3600)/60") | sed 's/:0\(..\)$/:\1/;s/^0\(..\):/\1:/')
            else
                ETAtimes=$((ETAsl -90000))
                ETAday=$(date -d @$ETAtimes +%j)
                if [ "$ETAday" -gt 50 ]
                then
                    ETAtime=$(echo $(bc <<<"$ETAday/30") months $(bc <<<"$ETAday%30") days | sed 's/\ 0\ ....$//;s/\ 1\ ..../\ 1\ day/;s/^1\ ....../1\ month/')
                else
                    ETAtime=$(echo $ETAday days $(date -d @$ETAtimes +%H:%M) | sed 's/^0*//;s/^\ ....//;s/^1\ ..../1\ day/')
                fi
            fi

            colortime=""
            [ "$ETAepoch" ] && [ "$((startepoch + jobtimelimit))" -lt "$ETAepoch" ] && colortime='\e[31m'

            percent=$(bc <<<"100*($currentstep-$initialtimestepf)/($maxtimestep-$initialtimestepf)")


            costETA=$(bc <<<"0.05*$jobcore*($ETAepoch-$startepoch)/3600")
            costnow=$(bc <<<"0.05*$jobcore*($nowepoch-$startepoch)/3600")

            if [[ "$maxit" ]]
            then
                maxIteration=$(bc <<<"($currentstep-$initialtimestepf)*($jobtimelimit)/($nowepoch-$startepoch)")
                maxitString=" (it=$maxIteration)"
            fi

            if [ "$strg" = "1" ]
            then
                nowsize=$(du -s "$dir" | awk '{print $1}')
                ETAsize=$(bc <<<"($maxtimestep - $currentstep)*($nowsize)/($currentstep-$initialtimestepf)")
                ETAsizeh=$(convert_human $(bc <<<"$ETAsize+$nowsize"))
                nowsizeh=$(convert_human $nowsize)
                ETAsizetotal=$((nowsize + ETAsize + ETAsizetotal))
                currentsizetotal=$((nowsize + currentsizetotal))
                if [[ "$ETAday" -ge 1 ]]
                then
                    ETA24hsize=$(bc <<<"$ETA24hsize + 86400*$nowsize*($currentstep-$initialtimestep)/(($currentstep-$initialtimestepf)*($nowepoch - $startepoch))")
                else
                    ETA24hsize=$((ETA24hsize + ETAsize))
                fi



                if [ "$marclus" = "4" ]
                then

                    printf "%-15s %-16s %-9s %-5s %7s/%-7s\e[31m%1s\e[0m %6s/%-6s %3s%% %6s %5s/%5s â‚¬ %3s %s %-8s %b %-20s %s \e[0m\n" \
                        "${dirp:0:15}" "${jobname_short:0:15}" "$jobid" "$jobcore" "$currentstep" \
                        "$maxtimestep" "$outerwarn" "$nowsizeh" "$ETAsizeh" "$percent" "$mem_s" "$costnow" "$costETA"\
                        "" "$jobdate" "$jobtime" "$colortime" "$ETAdate" "$ETAtime$maxitString"
                else
                    printf "%-15s %-16s %-9s %-5s %7s/%-7s\e[31m%1s\e[0m %6s/%-6s %3s%% %6s %3s %s %-8s %b %-20s %s \e[0m\n" \
                        "${dirp:0:15}" "${jobname_short:0:15}" "$jobid" "$jobcore" "$currentstep" \
                        "$maxtimestep" "$outerwarn" "$nowsizeh" "$ETAsizeh" "$percent" "$mem_s" "" "$jobdate" "$jobtime" "$colortime" "$ETAdate" "$ETAtime$maxitString"
                fi

            else

                if [ "$marclus" = "4" ]
                then
                    printf "%-15s %-16s %-9s %-5s %7s/%-7s\e[31m%1s\e[0m %3s%% %8s %5s/%5s â‚¬ %4s %s %-8s %b %-20s %s \e[0m\n" \
                        "${dirp:0:15}" "${jobname_short:0:15}" "$jobid" "$jobcore" "$currentstep" \
                        "$maxtimestep" "$outerwarn" "$percent" "$mem_s" "$costnow" "$costETA" "" "$jobdate" "$jobtime" "$colortime" "$ETAdate" "$ETAtime$maxitString"
                else
                    printf "%-15s %-16s %-9s %-5s %7s/%-7s\e[31m%1s\e[0m %3s%% %8s %4s %s %-8s %b %-20s %s \e[0m\n" \
                        "${dirp:0:15}" "${jobname_short:0:15}" "$jobid" "$jobcore" "$currentstep" \
                        "$maxtimestep" "$outerwarn" "$percent" "$mem_s" "" "$jobdate" "$jobtime" "$colortime" "$ETAdate" "$ETAtime$maxitString"
                fi
            fi

        else
            refresco=""
            [ ! "$isrefresco" ] && refresco="NO ReFRESCO"
            colorpd=""
            [ "$jobstate" = "PENDING" ] && colorpd="\e[2m"
            [ "$jobstate" = "PENDING" ] && [ -f "$dir"/stopfile ] && refresco="$refresco \e[1;31m"'/!\'" stopfile present\e[0m"

            if [ "$runonly" = "0" ] || [ "$jobstate" = "RUNNING" ]
            then

                reason=$(grep -m 1 "^Reason=" <<<"$jobinfo" | sed 's/^[^=]*=//')
                if [ "$strg" = 1 ]
                then
                    if [ "$marclus" = "4" ]
                    then
                        printf "%b%-15s %-16s %-9s %-8s %-51s %16s %-9s %b \e[0m\n"\
                            "$colorpd" "${dirp:0:15}" "${jobname_short:0:15}" "$jobid" "$jobcore" "$jobstate ($reason)" "$jobdate" "$jobtime" "$refresco"
                    else
                        printf "%b%-15s %-16s %-9s %-8s %-37s %16s %-9s %b \e[0m\n"\
                            "$colorpd" "${dirp:0:15}" "${jobname_short:0:15}" "$jobid" "$jobcore" "$jobstate ($reason)" "$jobdate" "$jobtime" "$refresco"
                    fi

                else

                    if [ "$marclus" = "4" ]
                    then
                        printf "%b%-15s %-16s %-9s %-8s %-41s %16s %-9s %b \e[0m\n"\
                            "$colorpd" "${dirp:0:15}" "${jobname_short:0:15}" "$jobid" "$jobcore" "$jobstate ($reason)" "$jobdate" "$jobtime" "$refresco"
                    else
                        printf "%b%-15s %-16s %-9s %-8s %-26s %16s %-9s %b \e[0m\n"\
                            "$colorpd" "${dirp:0:15}" "${jobname_short:0:15}" "$jobid" "$jobcore" "$jobstate ($reason)" "$jobdate" "$jobtime" "$refresco"
                    fi

                fi
            fi
        fi
    done <<<"$(squeue -S $sort -h -u $USER -o "%T %i")"

    [ $strg = 1 ] && storage_sub
}

storage_sub () {
    echo
    echo Total disk space needed: $(convert_human $ETAsizetotal)
    # [ "$marclus" = 4 ] && echo Current disk usage: $(convert_human $currentsizetotal)
    echo Disk usage growth rate: $(convert_human $ETA24hsize)/day

    main_nb_line=$((main_nb_line + 3))
    # [ "$marclus" = 4 ] && main_nb_line=$((main_nb_line + 1))
}


count_sub () {
    echo -e "\e[34m\e[4mUsed CPUs per user:\e[0m"
    list=$(squeue -t R -h -o "%u %C")
    users_c=$(awk '{print $1}' <<<"$list" | sort | uniq)
    used_core=$(awk '{s+=$2} END {print s}' <<<"$list")
    nb_user=$(squeue -h -o  "%u" | sort -u | wc -l)
    avg=$(bc <<<"$used_core / $nb_user")

    while read user
    do
        nb=$(grep ^$user\  <<<"$list" | awk '{s+=$2} END {print s}')
        if [ "$nb" -gt "$avg" ]
        then
            echo -e "$user: \e[31m$nb\e[0m"
        else
            echo -e "$user: $nb"
        fi
    done <<<"$users_c" | column -t
}


top_sub () {

    list=$(squeue -t R -h -o "%u %D %C %P")
    users_t=$(awk '{print $1}' <<<"$list" | sort -u)
    echo "USER NB_JOBS NB_NODES NB_CPUS PARTITIONS"
    while read user
    do
        userlist=$(grep ^$user\  <<<"$list")
        nbjob=$(wc -l <<<"$userlist")
        core=$(awk '{s+=$3} END {print s}' <<<"$userlist")
        node=$(awk '{s+=$2} END {print s}' <<<"$userlist")
        partition=$(awk '{print $4}' <<<"$userlist" | sort -u | tr '\n' ',' | sed 's/,$//')
        echo $user $nbjob $node $core $partition

    done <<<"$users_t" | sort -n -k 4 -r

    if [ "$runonly" = "0" ]
    then
        list=$(squeue -t PD -h -o "%u %D %C %P")
        users_t=$(awk '{print $1}' <<<"$list" | sort -u)
        while read user
        do
            userlist=$(grep ^$user\  <<<"$list")
            nbjob=$(wc -l <<<"$userlist")
            core=$(awk '{s+=$3} END {print s}' <<<"$userlist")
            node=$(awk '{s+=$2} END {print s}' <<<"$userlist")
            partition=$(awk '{print $4}' <<<"$userlist" | sort -u | tr '\n' ',' | sed 's/,$//')
            echo "$user $nbjob pending $core $partition"

        done <<<"$users_t" | sort -n -k 4 -r
    fi

}


wdir_sub () {
    if [ -z $jobid_d ]
    then
        jobid_d=$(squeue -S $sort -h -u $USER -o "%i" | head -n 1)
        [ -z $jobid_d ] && echo "No jobID" && exit 1
    fi
    dir=$(scontrol show job $jobid_d | grep -m 1 "^\ *WorkDir=" | sed 's/^[^=]*=//')
    [ -z "$dir" ] && echo . && exit 1
    echo $dir
}


userl_sub () {
    arg=''
    [ "$users" ] && arg="-u $users"
    [ "$runonly" = "1" ] && arg="$arg -t R"
    template="%8i %5Q %9P %14u %30j %8T %18S %.12l %.12L %.4C"
    [ "$nodelist" ] && template="$template %R"
    result=$(squeue $arg -S $sort -o "$template" | \
        sed -r 's/([0-9])T([0-9])/\1\ \2/;s/:[0-9]*\ /\ \ \ \ /;s/^(.*)PENDING(.*)$/\x1b[2m\1PENDING\2\x1b[0m/')
    if [ "$project_number" = 1 ]
    then
        echo -e "$result"
    else
        echo -e "$result" | sed -r 's/P[0-9]{5}\.[0-9]{3}//;s/\ _/\ \ /;s/NAME(\ ){11}/\ NAME/'
    fi
}


partition_sub () {
    sinfo -h -o "%R %C" | sed 's/\//\ /g' | awk '{printf "Partition=%-21s Used=%-5d Total=%-5d Error=\033[0;%dm%-5d\033[0m Available=\033[0;%dm%-5d\033[0m Usage=%3d % \n",
    "\33[4;34m" $1 "\33[0m",$2,$5,0,$4,32,$3, ($2*100)/($5-$4-1e-8)}'
}


stopcomputation_sub () {
    [ -z $jobid_d ] && echo "Error: no jobID given" && exit 1
    state=$(scontrol show job $jobid_d | grep -m 1 "^\ *JobState=" | sed 's/^[^=]*=//')
    if [ "$state" == "RUNNING" ]
    then
        dir=$(scontrol show job $jobid_d | grep -m 1 "^\ *WorkDir=" | sed 's/^[^=]*=//')
        [ -z "$dir" ] && exit 1

        touch "$dir"/stopfile
        [ $? ] || echo stopfile written to "$dir"
    else
        echo "Job not running, launching 'scancel $jobid_d'"
        scancel "$jobid_d"
    fi
}


display-notif () {
    pendingJobs=$(squeue -h -u $USER -o "%T" | grep PENDING | wc -l)
    runningJobs=$(squeue -h -u $USER -o "%T" | grep RUNNING | wc -l)

    [[ -z "$pendingJobsOld" ]] && pendingJobsOld=$pendingJobs
    [[ -z "$runningJobsOld" ]] && runningJobsOld=$runningJobs

    if [[ "$runningJobsOld" != "$runningJobs" ]] || [[ "$pendingJobsOld" != "$pendingJobs" ]]
    then
        diffrunning=$((runningJobs - runningJobsOld))
        diffpending=$((pendingJobs - pendingJobsOld))
        [[ ${diffrunning:0:1} != '-' ]] && diffrunning="+$diffrunning"
        [[ ${diffpending:0:1} != '-' ]] && diffpending="+$diffpending"
        pendingJobsOld="$pendingJobs"
        runningJobsOld="$runningJobs"

        notify-send "rsqueue on $HOSTNAME" "$runningJobs running jobs ($diffrunning)\n$pendingJobs pending jobs ($diffpending)"
    fi
}


erase () {
    for i in $(seq $1)
    do
        echo -en "\033[2K"
        tput cuu1
    done
}

marclus=$(hostname | cut -c8)
strg=1
runonly=0
project_number=1
sort="-T,u,i"


while [[ $# -gt 0 ]]
do
    case $1 in
        -i)
            params="$params -i"
            shift
            ;;
        -s)
            strg=0
            shift
            ;;
        -r)
            runonly=1
            shift
            ;;
        -c)
            params="$params -c"
            shift
            ;;
        -d)
            shift
            jobid_d="$1"
            wdir_sub
            exit 0
            ;;
        -u)
            if [ -z "$2" ] || [ "${2:0:1}" = "-" ]
            then
                users=""
            else
                shift
                users="$1"
            fi
            params="$params -u"
            shift
            ;;
        -t|--top)
            params="$params -t"
            shift
            ;;
        --pn)
            project_number=0
            shift
            ;;
        -a|--all)
            params="$params -a"
            shift
            ;;
        --st)
            sort="S,-Q"
            shift
            ;;
        -p)
            params="$params -p"
            shift
            ;;
        --node)
            nodelist=1
            shift
            ;;
        --maxit)
            maxit=1
            shift
            ;;
        -f|--follow)
            if [ -z "$2" ] || [ "${2:0:1}" = "-" ]
            then
                refresh_time="15"
            else
                shift
                refresh_time="$1"
            fi

            follow="y"
            shift
            ;;
        --notif)
            if [ -n "$DISPLAY" ]
            then
                notif=1
            else
                notif=0
                echo "WARNING: Notification display not possible, you need ssh X-forwarding"
            fi
            shift
            ;;
        --stop)
            shift
            jobid_d="$1"
            stopcomputation_sub
            exit 0
            ;;

        -h|--help)
            man_sub
            exit 0
            ;;
        -4) #for debug only
            marclus=4
            shift
            ;;
        *)
            echo "Unknown argument: $1"
            man_sub
            exit 1
            ;;
    esac
done


if [ -z "$params" ]
then
    params=$defaultparams
fi

if [ "$(grep '\-a' <<<"$params")" ]
then
    params=$allparams
fi

main_nb_line=0
for param in $params
do
    case $param in
        -i) main_sub
            ;;
        -c) count_sub
            ;;
        -d) wdir_sub
            ;;
        -t) top_sub  | column -t  | sed -r 's/^(.*)pending(.*)$/\x1b[2m\1pending\2\x1b[0m/'
            ;;
        -u) userl_sub
            ;;
        -p) partition_sub
            ;;
    esac

    echo
done
main_nb_line=$((main_nb_line + 1))

pendingJobsOld=""
runningJobsOld=""

if [[ "$follow" ]]
then
    while sleep "$refresh_time";
    do
        var=$(main_sub)
        erase $main_nb_line
        echo -e "$var"
        main_nb_line=$(wc -l <<<"$var")

        [ "$notif" ] && display-notif

    done
fi

# vim: ai ts=4 sw=4 et sts=4 ft=sh
